
import logging
import os
import gspread
from aiogram import Bot, Dispatcher, executor, types
from oauth2client.service_account import ServiceAccountCredentials

BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_NAME = "OptoMarkaz_Tovary"

scope = ["https://spreadsheets.google.com/feeds","https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("service_account.json", scope)
client = gspread.authorize(creds)
sheet = client.open(SPREADSHEET_NAME).sheet1

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OptoMarkaz B2B –±–æ—Ç!\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "üõí –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä: —Ç–æ–≤–∞—Ä, —Ü–µ–Ω–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ\n"
        "üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤: /list"
    )

@dp.message_handler(lambda m: ',' in m.text)
async def add_product(message: types.Message):
    try:
        name, price, qty = [x.strip() for x in message.text.split(',')]
        sheet.append_row([name, price, qty, message.from_user.full_name])
        await message.reply("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await message.reply(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")

@dp.message_handler(commands=['list'])
async def list_products(message: types.Message):
    rows = sheet.get_all_values()[1:]
    if not rows:
        await message.reply("üì≠ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç.")
        return
    text = "üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n"
    for row in rows:
        name, price, qty = row[:3]
        text += f"üîπ {name} ‚Äî {price} —Å–æ–º, –æ—Å—Ç–∞–ª–æ—Å—å: {qty}\n"
    await message.reply(text)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
